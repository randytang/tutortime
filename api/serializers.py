from log_in.models import CustomUser, School, UserMajorMap, Major, Course, UserCoursesMap, ApptDetails, ApptRequests, TutorProfile
from django.contrib.auth.models import Group
from rest_framework import serializers
from django.contrib.auth import get_user_model
from rest_framework.validators import UniqueValidator
from django.contrib.auth.password_validation import validate_password


#is the 'url' field analagous to 'id' in that it's autogenerated
#by the framework? from the docs it seems if we were to use primary/foreignkey
#relationships, we can but we probably wouldn't need to use 'url' in 
#that case as well as 'HyperlinkedModelSerializer'.
#class CustomUserSerializer(serializers.HyperlinkedModelSerializer):
#    class Meta:
#        model = CustomUser
#        fields = ['url', 'username', 'first_name', 'last_name', 'year', 'email', 'groups', 'school',] 
custom_user = get_user_model()

class CustomUserSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only = True, required = True, validators = [validate_password])
    password2 = serializers.CharField(write_only = True, required = True)
    email = serializers.EmailField(
            required = True,
            validators = [UniqueValidator(queryset = custom_user.objects.all())]
            )

    
    def create(self, validated_data):
        user = custom_user.objects.create_user(
                username = validated_data['username'],
                email = validated_data['email'],
                first_name = validated_data['first_name'],
                last_name = validated_data['last_name'],
                school = validated_data['school']
                )
        user.set_password(validated_data['password'])
        user.save()
        user.groups.add(2)
        return user


    class Meta:
        model = custom_user
        fields = ("id", "username", "password", "password2","email", "first_name", "last_name", "school")
        extra_kwargs = {
            "first_name": {'required': True},
            "last_name": {'required': True}
            }

    def validate(self, attrs):
        if attrs['password'] != attrs['password2']:
            raise serializers.ValidationError({"password": "Password fields didn't match."})

        return attrs

class BasicUserSerializer(serializers.ModelSerializer):
    email = serializers.EmailField(allow_blank = True,
            validators = [UniqueValidator(queryset = custom_user.objects.all())],
            )
    username = serializers.CharField(allow_blank = True)
    first_name = serializers.CharField(allow_blank = True)
    last_name = serializers.CharField(allow_blank = True)
    year = serializers.CharField(max_length = 2, allow_blank = True)

    def update(self, instance, validated_data):
        username_input = validated_data.get('username', instance.username)
        if (username_input == ''):
            username_input = instance.username
        instance.username = username_input
        
        first_name_input = validated_data.get('first_name', instance.first_name)
        if (first_name_input == ''):
            first_name_input = instance.first_name
        instance.first_name = first_name_input

        last_name_input = validated_data.get('last_name', instance.last_name)
        if (last_name_input == ''):
            last_name_input = instance.last_name
        instance.last_name = last_name_input

        email_input = validated_data.get('email', instance.email)
        if (email_input == ''):
            email_input = instance.email
        instance.email = email_input

        year_input = validated_data.get('year', instance.year)
        if (year_input == ''):
            year_input = instance.year
        instance.year = year_input 

        instance.save()
        return instance

    class Meta:
        model = custom_user
        fields = ("username", "email", "first_name", "last_name", "year")




class GroupSerializer(serializers.HyperlinkedModelSerializer):
    class Meta:
        model = Group
        fields = ['url', 'name']

class SchoolSerializer(serializers.ModelSerializer):
    class Meta:
        model = School
        fields = ['id', 'name']

class UserMajorSerializer(serializers.HyperlinkedModelSerializer):
    class Meta:
        model = UserMajorMap
        fields = ['url', 'user', 'major']

class MajorSerializer(serializers.HyperlinkedModelSerializer):
    class Meta:
        model = Major
        fields = ['url', 'major', 'school']
        
#class CourseSerializer(serializers.HyperlinkedModelSerializer):
#    class Meta:
#        model = Course
#        fields = ['url', 'course_code', 'name', 'school_offering']
class CourseSerializer(serializers.ModelSerializer):
    class Meta:
        model = Course
        fields = ['id', 'course_code', 'name', 'school_offering']

class UserCoursesSerializer(serializers.HyperlinkedModelSerializer):
    class Meta:
        model = UserCoursesMap
        fields = ['url', 'user', 'taking_course', 'semester', 'year_taken']

#class ApptDetailsSerializer(serializers.HyperlinkedModelSerializer):
#    class Meta:
#        model = ApptDetails
#        fields = ['url', 'subject', 'date_and_time', 'location']
class ApptDetailsSerializer(serializers.ModelSerializer):
    class Meta:
        model = ApptDetails
        fields = ['id', 'subject', 'date_and_time', 'location']

#class ApptRequestsSerializer(serializers.HyperlinkedModelSerializer):
#    notes = serializers.CharField(allow_blank=True)
#    class Meta:
#        model = ApptRequests
#        fields = ['url', 'student', 'tutor_requested', 'appt_details', 'pending', 'approval', 'notes']
class ApptRequestsSerializer(serializers.ModelSerializer):
    notes = serializers.CharField(default="", allow_null=True, allow_blank=True)
    appt_details = ApptDetailsSerializer()
    student = CustomUserSerializer()
    tutor_requested = CustomUserSerializer()
    class Meta:
        model = ApptRequests
        fields = ['id', 'student', 'tutor_requested', 'appt_details', 'pending', 'approval', 'notes']

#class TutorProfileSerializer(serializers.HyperlinkedModelSerializer):
#    class Meta:
#        model = TutorProfile
#        fields = ['url', 'user', 'about']

class TutorProfileSerializer(serializers.ModelSerializer):
    about = serializers.CharField(allow_null = True, allow_blank = True)
    
    def update(self, instance, validated_data):
        about_input = validated_data.get('about', instance.about)
        if (about_input == ''):
            about_input = instance.about
        instance.about= about_input 

        instance.save()
        return instance

    class Meta:
        model = TutorProfile
#        fields = ['id', 'user', 'about']
        fields = ['about']
    

class flatBasicUserSerializer(serializers.Serializer):
    email = serializers.EmailField()
    first_name = serializers.CharField()
    groups = serializers.CharField()
    last_name = serializers.CharField()
    school = serializers.DictField(child=serializers.CharField())
    username = serializers.CharField()
    year = serializers.CharField()
